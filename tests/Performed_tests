FileStorage:

    @class TestFileStorage_init
    FileStorage initialisation:
        - initalizing the class withouts args : test_FileStorage_init_zero_arg
        - initalizing the class with args : test_FileStorage_init_with_args
        - make sure that the path is private str : test_FileStorage_file_path_is_private_str
        - make sure that the __objects is private dict : test_FileStorage_objects_is_private_dict
        - test correct initialization : test_storage_init_success
    
    @ class Test_FileStorage_methods
    FileStorage methods:
        @ all()
        - test all func without args : test_all_no_args
        - test all func with args : test_all_with_args
        @ ClassName()
        - test creating new instances without args : test_create_new_no_args
        - test creating new instances with args : test_create_new_with_args
        - test creating new instances with arg None : test_create_new_with_None
        @ save()
        - test save without args : test_save_no_args
        - test save with args : test_save_with_args
        @ reload()
        - test reload fun without args : test_reload_no_args
        - test reload fun without a file present in the directory : test_reload_no_file
        - test reload fun with args : test_reload_with_args

BaseModel :

    @ class TestBaseModel_instantiation
    BaseModel initialization :
        @ ClassName()
        - tests init with no args : test_no_args_instantiates
        - tests existance of an instance in storage : test_new_instance_stored_in_objects
        @ ClassName.attrib
        - test id is a public str : test_id_is_public_str
        - test if created_at is public datetime obj : test_created_at_is_public_datetime
        - test if updated_at is public datetime obj : test_updated_at_is_public_datetime
        - test unique ids : test_two_models_unique_ids
        - test if created_at is assigned correctly : test_two_models_different_created_at
        - test if updated_at is assigned correctly : test_two_models_different_updated_at
        - tests str repr conformity: test_str_representation
        @ ClassName()
        - test unused args : test_args_unused
        - test initiation with **kargs : test_instantiation_with_kwargs
        - test init without **kargs : test_instantiation_with_None_kwargs
        - test init with args and **kargs : test_instantiation_with_args_and_kwargs

    @ class TestBaseModel_save
    BaseModel save:
        @ BaseModel.save()
        - tests for the saving one time : test_one_save
        - test for saving two times : test_two_saves
        - test calling save with args : test_save_with_arg
        - test for updates after calling save : test_save_updates_file

    @ class TestBaseModel_to_dict
    BaseModel to_dict:
        @ BaseModel.to_dict()
        - test for the method return type : test_to_dict_type
        - test for methode return values : test_to_dict_contains_correct_keys
        - test for attributes returned : test_to_dict_contains_added_attributes
        - test for date related attributes type : test_to_dict_datetime_attributes_are_strs
        - test method output : test_to_dict_output
        - test for diffrences between .to_dict and .__dict__ : test_diff_dict_and__dict
        - test calling the methode with args : test_to_dict_with_arg

Amenity :
    @ class TestAmenity
    Amenity class:
        @ ClassName.attrib
        - tests the name attrib : test_name

City :
    @ class TestCity
    City class:
        @ ClassName.attrib
        - tests the public attrib : test_attrib

Place :
    @ class TestPlace
    Place class:
        @ ClassName.attrib
        - tests the public attrib : test_attrib

Review :
    @ class TestReview
    Review class:
        @ ClassName.attrib
        - tests the public attrib : test_attrib

State :
    @ class TestState
    State class:
        @ ClassName.attrib
        - tests the public attrib : test_attrib

User :
    @ class TestUser
    User class:
        @ ClassName.attrib
        - tests the public attrib : test_attrib
